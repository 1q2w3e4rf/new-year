import telebot
from telebot import types
from bs4 import BeautifulSoup
import requests
import datetime

TOKEN = ''

bot = telebot.TeleBot(TOKEN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ 100 –∏ 1 —Ñ–∞–∫—Ç –ø—Ä–æ –Ω–æ–≤—ã–π –≥–æ–¥\n–ö–æ–º–∞–Ω–¥–∞: /fact")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–æ–≤
def parse_legends(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    legends = soup.find_all('p')
    return [legend.text for legend in legends]

legends = parse_legends('https://gainynv-news.ru/news/media/2021/12/6/100-i-1-zabavnyih-faktov-pro-novyij-god/')

def time_until_new_year():
    now = datetime.datetime.now()
    next_year = now.year + 1
    new_year = datetime.datetime(next_year, 1, 1, 0, 0, 0)
    time_left = new_year - now

    days = time_left.days
    hours = time_left.seconds // 3600
    minutes = (time_left.seconds % 3600) // 60
    seconds = time_left.seconds % 60

    return days, hours, minutes, seconds

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /time
@bot.message_handler(commands=['time'])
def send_time_until_new_year(message):
    days, hours, minutes, seconds = time_until_new_year()
    bot.send_message(message.chat.id, f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
removed_numbers = set()
user_removed_numbers = {}
next_fact_number = {}
fact_session_active = {}
seen_facts = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /fact
@bot.message_handler(commands=['fact'])
def send_legends(message):
    user_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    if user_id in fact_session_active and fact_session_active[user_id]:
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è —Ñ–∞–∫—Ç–æ–≤ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    next_fact_number[user_id] = 1
    seen_facts[user_id] = set()
    fact_session_active[user_id] = True # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.add(types.KeyboardButton('1'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def send_fact(message):
    user_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —É–≤–∏–¥–µ–ª —ç—Ç–æ—Ç —Ñ–∞–∫—Ç
    if user_id not in user_removed_numbers:
        user_removed_numbers[user_id] = set()
        next_fact_number[user_id] = 1
    
    if message.text == "24" and message.text.isdigit() and int(message.text) == next_fact_number[user_id] and next_fact_number[user_id] <= len(legends):
        fact_number = int(message.text) - 1
        bot.send_message(message.chat.id, legends[fact_number])
        user_removed_numbers[user_id].add(int(message.text))
        keybord = types.InlineKeyboardMarkup()
        keybord.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no"))
        bot.send_message(message.chat.id, "–¢—ã –Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å?", reply_markup=keybord)
        return

    if message.text == "52" and message.text.isdigit() and int(message.text) == next_fact_number[user_id] and next_fact_number[user_id] <= len(legends):
        fact_number = int(message.text) - 1
        bot.send_message(message.chat.id, legends[fact_number])
        user_removed_numbers[user_id].add(int(message.text))
        keybord = types.InlineKeyboardMarkup()
        keybord.add(types.InlineKeyboardButton("–¢–æ—á–Ω–æ!", callback_data="yes"))
        bot.send_message(message.chat.id, "–¢–û–ß–ù–û?!", reply_markup=keybord)
        return


    if message.text == "75" and message.text.isdigit() and int(message.text) == next_fact_number[user_id] and next_fact_number[user_id] <= len(legends):
        fact_number = int(message.text) - 1
        bot.send_message(message.chat.id, legends[fact_number])
        user_removed_numbers[user_id].add(int(message.text))
        keybord = types.InlineKeyboardMarkup()
        keybord.add(types.InlineKeyboardButton("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ?", callback_data="rek"))
        bot.send_message(message.chat.id, "–ù–µ –æ–∂–∏–¥–∞–ª —ç—Ç–æ –æ—Ç —Ç–µ–±—è", reply_markup=keybord)
        return

    if message.text == "101" and message.text.isdigit() and int(message.text) == next_fact_number[user_id] and next_fact_number[user_id] <= len(legends):
        fact_number = int(message.text) - 1
        bot.send_message(message.chat.id, legends[fact_number])
        keybord = types.InlineKeyboardMarkup()
        keybord.add(types.InlineKeyboardButton("–Ø –≤—Å–µ –ø–æ–Ω—è–ª –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!!!", callback_data="rek1"))
        bot.send_message(message.chat.id, "–ú–æ–∂–µ—Ç —Ö–æ—Ç—å —è –∏ –±–æ—Ç –Ω–æ –º–æ–∂–µ—Ç –∏ –º–µ–Ω—è –ø–æ–∑–¥—Ä–∞–≤–∏—à—å —Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º?", reply_markup=keybord)
        return
    
    if message.text == "–ù—É –ª–∞–¥–Ω–æ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!":
        bot.send_message(message.chat.id, "üéÑ–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!üéÑ")
        return

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–∫—Ç–∞
    if message.text.isdigit() and int(message.text) == next_fact_number[user_id] and next_fact_number[user_id] <= len(legends):
        fact_number = int(message.text) - 1
        bot.send_message(message.chat.id, legends[fact_number])
        user_removed_numbers[user_id].add(int(message.text))
        next_fact_number[user_id] += 1


        keyboard = types.ReplyKeyboardMarkup()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–∫—Ç
        if next_fact_number[user_id] <= len(legends):
            keyboard.add(types.KeyboardButton(str(next_fact_number[user_id])))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞:", reply_markup=keyboard)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "no":
        user_id = call.message.chat.id
        next_fact_number[user_id] += 1
        keybord = types.ReplyKeyboardMarkup()
        keybord.add(types.KeyboardButton("25"))
        bot.send_message(call.message.chat.id, "–ù—É –∏ –ª–∞–¥–Ω–æ!", reply_markup=keybord)

    elif call.data == "yes":
        user_id = call.message.chat.id
        next_fact_number[user_id] += 1
        keybord = types.ReplyKeyboardMarkup()
        keybord.add(types.KeyboardButton("53"))
        bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ...", reply_markup=keybord)

    elif call.data == "rek":
        user_id = call.message.chat.id
        next_fact_number[user_id] += 1
        keybord = types.ReplyKeyboardMarkup()
        keybord.add(types.KeyboardButton("76"))
        bot.send_message(call.message.chat.id, "...", reply_markup=keybord)

    elif call.data == "rek1":
        user_id = call.message.chat.id
        next_fact_number[user_id] += 1
        bot.send_message(call.message.chat.id, "üéÑ–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º!üéÑ")

bot.infinity_polling()
